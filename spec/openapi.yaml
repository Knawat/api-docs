openapi: 3.0.0
info:
  version: '1.2.7'

  title: Knawat MP

  termsOfService: https://knawat.com/terms-and-conditions/
  contact:
    email: support.tech@knawat.com
    url: 'https://developer.knawat.com'
  license:
    name: Knawat Copyright Â© - 2017 - 2019
    url: 'https://knawat.com/terms-and-conditions/'
  x-logo:
    url: 'https://knawat.com/wp-content/themes/knawat/assets/images/knawat-orange-logo.svg'

  description: >
    Welcome to the Knawat MP documentation. Navigate through the documentation
    to learn more. If you encounter any problems when using our APIs, send us an
    email it@knawat.com;
    
    ## What is Knawat?

    Knawat is a Drop-Shipping platform. We are bringing hundreds of
    thousands of products to let you list in your e-commerce store. We also
    do all operations behind the e-commerce, so once you receive an order,
    we will ship it to your customer with your invoice.

    ## What is Knawat MP API?

    Knawat MP APIs mainly for e-commerce stores, allows you to aggregate
    products to your store, update stock and prices, and send us your
    orders.

    ## Features
      * Fetch products with pagination
      * fetch one product to validate price or qty
      * All prices in USD
    
    ## To-Dos
      * Fetch product(s) with your currency
      * Advanced products search with keyword

    ## Support and Chat
      We are happy to receive you questions. click here to [chat with
        us](https://gitter.im/Knawat/Lobby).
tags:
  - name: Authentication
    description: text here
  - name: My Products
    description: >
        How products can come to your API?
        
        ![](https://www.dropbox.com/s/tb8708y269pccx0/ZApp%20-%20products.png?dl=1)
    externalDocs:
      description: Register and import some products
      url: https://app.knawat.com
  - name: Orders
  - name: Invoices
  - name: Payments
  - name: Enterprise Only
    description: Ask sales for enterprise subscriptions
    externalDocs:
      url: https://knawat.com/pricing
  - name: Stores
  - name: Products
    description: This is how you can get all Knawat products to list it directly on your
        store, this endpoint for enterprise only customers only
  - name: Currencies
  - name: Shipment

paths:
  /token:
    post:
      summary: Get token
      tags:
        - Authentication
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                description: Channel information
                properties:
                  channel:
                    type: object
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '422':
          description: Status 422
          content:
            application/json:
              schema:
                type: object
                description: consumerKey or consumerSecret is wrong
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - consumerKey
                - consumerSecret
              properties:
                consumerKey:
                  type: string
                consumerSecret:
                  type: string
        required: true
  /catalog/products:
    get:
      summary: Get Products
      tags:
        - My Products
      description: Retrieve imported products, sorted by create date DESC
      parameters:
        - name: limit
          in: query
          required: false
          description: Size of the page to retrieve.
          schema:
            type: integer
            maximum: 100
            default: 10
        - name: page
          in: query
          required: false
          description: Number of the page to retrieve.
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: lastupdate
          in: query
          required: false
          description: >-
            Timestamp(seconds since Jan 01 1970. (UTC)) of last import run
            DateTime (must be in UTC), API will respond only products which are
            updated/created after this timestamp.
          example: '1542794072 for 21-11-2018 @ 9:54am'
          schema:
            type: string
            format: date-time
        - name: keyword
          in: query
          required: false
          description: Full text search in sku field
          schema:
            type: string
        - name: hideOutOfStock
          in: query
          required: false
          description: Hide out of stock products
          example: 1 => Hide archived products else will not hide
          schema:
            type: number
        - name: currency
          in: query
          required: false
          description: 3 digit numeric ISO 4217 codes
          schema:
            type: string
            minLength: 3
            maxLength: 3
            pattern: '^[A-Z]{3}$'
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                required:
                  - products
                  - total
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: number
                    description: total products across all pages
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
      security:
        - bearerAuth: []
    post:
      summary: Add to my products
      tags:
        - My Products
      description: Add products to my list
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: array
                    items:
                      type: string
                  outOfStock:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - products
              properties:
                products:
                  type: array
                  items:
                    required:
                      - sku
                    type: object
                    properties:
                      sku:
                        type: string
                  minItems: 1
                  maxItems: 1000
        required: true
    patch:
      summary: Bulk update products
      tags:
        - My Products
      description: 'Update externalUrl, externalId and variations.error'
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                required:
                  - sku
                type: object
                properties:
                  sku:
                    type: string
                  externalUrl:
                    type: string
                  externalId:
                    type: string
                  error:
                    type: array
                    items:
                      type: string
                  variations:
                    type: array
                    items:
                      type: object
                      properties:
                        sku:
                          type: string
                        externalId:
                          type: string
        required: true
  /catalog/products/count:
    get:
      summary: Products Count
      tags:
        - My Products
      description: Get in stock products count
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '500':
          description: Internal  Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - bearerAuth: []
  '/catalog/products/{sku}':
    get:
      summary: Get product by SKU
      tags:
        - My Products
      description: >-
        Retrieve single product information by Product SKU. product should be
        under this store
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '404':
          description: SKU not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
    put:
      summary: Update Product
      tags:
        - My Products
      description: Update imported product External IDs by SKU
      parameters:
        - name: sku
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Status 200
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '404':
          description: Status 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                externalUrl:
                  type: string
                externalId:
                  type: number
                variations:
                  type: array
                  items:
                    required:
                      - sku
                    type: object
                    properties:
                      sku:
                        type: string
                      externalId:
                        type: number
                  minItems: 1
                error:
                  type: array
                  items:
                    type: string
        required: true
    delete:
      summary: Delete product by SKU
      tags:
        - My Products
      description: >-
        Delete Product by Product SKU from store. product should be under this
        store
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  value: 
                    {
                      status: 'success',
                      message: 'Product has been deleted.',
                      sku: '47EE3550-B619'
                    }
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - bearerAuth: []
    parameters:
      - name: sku
        in: path
        required: true
        description: Identifier of the Task
        example: 47ee3550-b619
        schema:
          type: string
  /catalog/categories:
    get:
      summary: Get list of categories
      tags:
        - Products
      description: Get all categories related to my products.
      parameters:
        - name: parentId
          in: query
          required: false
          schema:
            type: number
        - name: treeNodeLevel
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
              examples:
                response:
                  value: 
                    {
                      "count": 123,
                      "categories": [
                        {
                          "id": 4857,
                          "name": {
                            "tr": "AyakkabÄ±",
                            "en": "Shoes",
                            "ar": "Ø­Ø°Ø§Ø¡"
                          },
                          "parentId": 455,
                          "productsCount": 100,
                          "treeNodeLevel": 1
                        }
                      ]
                    }
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
      security:
        - bearerAuth: []
  /orders:
    get:
      summary: Get Order(s)
      tags:
        - Orders
      description: To get all the order info you could use get order by id end-point
      parameters:
        - name: limit
          in: query
          required: false
          description: Size of the page to retrieve.
          schema:
            type: number
            minimum: 1
            maximum: 50
            default: 10
        - name: page
          in: query
          required: false
          schema:
            type: number
            minimum: 1
            default: 1
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    status:
                      type: string
                    createDate:
                      type: string
                      format: date
                    updateDate:
                      type: string
                      format: date
                    total:
                      type: number
                    knawat_order_status:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
      security:
        - bearerAuth: []
    post:
      summary: Create order
      tags:
        - Orders
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '404':
          description: Status 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value: 
                    {
                        "errorCode": 404,
                        "errorMessage": "SKU(s) out of stock.",
                        "data": {
                            "outOfStock": [
                                "sku1",
                                "sku2"
                            ]
                        }
                    }
        '428':
          description: Status 428
          content:
            application/json:
              schema:
                type: object
                description: |-
                  ```
                  {
                                errors: [
                                  {
                                    status: 'fail',
                                    message: 'No Billing Address Or Address Missing Data. Your order failed!',
                                    solution: `Please fill on your store billing address from here: https://app.knawat.com/settings/store`
                                  }
                                ]
                              }
                  ```
                properties:
                  errors:
                    type: array
                    items:
                      required:
                        - message
                        - solution
                        - status
                      type: object
                      properties:
                        status:
                          type: string
                          enum:
                            - fail
                        message:
                          type: string
                        solution:
                          type: string
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        status:
                          type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - order
              properties:
                order:
                  $ref: '#/components/schemas/Order'
        required: true
  '/orders/{order_id}':
    get:
      summary: Order by id
      tags:
        - Orders
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Status 400
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: There is an error
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '404':
          description: Status 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value: 
                    {
                        "errorMessage": "Order not found."
                    }
      security:
        - bearerAuth: []
    put:
      summary: Update order
      tags:
        - Orders
      description: Update order by id
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '404':
          description: Status 404
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                response:
                  value: 
                    {
                        "errorCode": 404,
                        "errorMessage": "Order not found.",
                        "data": {}
                    }
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      message:
                        type: string
                      status:
                        type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - order
              properties:
                id:
                  type: string
                order:
                  $ref: '#/components/schemas/Order'
              description: Order Confirmation
        required: true
    delete:
      summary: Cancel order
      tags:
        - Orders
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '404':
          description: Status 404
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        status:
                          type: string
      security:
        - bearerAuth: []
    parameters:
      - name: order_id
        in: path
        required: true
        schema:
          type: string
  /stores/me:
    get:
      summary: My Store info
      tags:
        - Stores
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
        '404':
          description: Status 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - bearerAuth: []
  /stores:
    get:
      summary: All Stores
      tags:
        - Stores
        - Enterprise Only
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
        '404':
          description: Status 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - basicAuth: []
    post:
      summary: Create new store
      tags:
        - Stores
        - Enterprise Only
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Store'
  '/stores/{url}':
    get:
      summary: Get Store by url
      tags:
        - Stores
        - Enterprise Only
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
        '404':
          description: Status 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - basicAuth: []
    put:
      summary: Update Store by URL
      tags:
        - Stores
        - Enterprise Only
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Store'
    parameters:
      - name: url
        in: path
        required: true
        schema:
          type: string
  /products:
    get:
      summary: Get all Knawat Products
      tags:
        - Products
        - Enterprise Only
      responses:
        '200':
          description: Status 200
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
  '/products/{sku}':
    get:
      summary: Get Product by SKU
      tags:
        - Products
        - Enterprise Only
      responses:
        '200':
          description: Status 200
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
    parameters:
      - name: sku
        in: path
        required: true
        schema:
          type: string
  '/currencies/{currencyCode}':
    get:
      summary: Get Currency By Code
      tags:
        - Currencies
        - Enterprise Only
      description: 'Gets currency code, name and rate'
      parameters:
        - name: currencyCode
          in: query
          required: false
          schema:
            type: string
            minLength: 3
            maxLength: 3
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
        '404':
          description: Status 404
      security:
        - basicAuth: []
    parameters:
      - name: currencyCode
        in: path
        required: true
        schema:
          type: string
  /currencies:
    get:
      summary: Get Currencies
      tags:
        - Currencies
        - Enterprise Only
      description: 'Get all currencies with names, code and rates info'
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
  /shipment:
    get:
      summary: Get All Shipment Policies
      tags:
        - Shipment
        - Enterprise Only
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShipmentPolicy'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
    post:
      summary: Insert Shipment Policy
      tags:
        - Shipment
        - Enterprise Only
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentPolicy'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ShipmentPolicy'
  '/shipment/{id}':
    get:
      summary: Get Shipment Policy By ID
      tags:
        - Shipment
        - Enterprise Only
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentPolicy'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
    put:
      summary: Update Shipment Policy
      tags:
        - Shipment
        - Enterprise Only
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentPolicy'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/ShipmentPolicy'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
  /shipment/rules:
    get:
      summary: Get Shipment Cost
      tags:
        - Shipment
        - Enterprise Only
      parameters:
        - name: country
          in: query
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 2
        - name: weight
          in: query
          required: true
          schema:
            type: number
        - name: price
          in: query
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                required:
                  - cost
                  - courier
                  - duration
                  - odoo_id
                type: object
                properties:
                  courier:
                    type: string
                  cost:
                    type: number
                  duration:
                    type: string
                  odoo_id:
                    type: number
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
  /shipment/couriers:
    get:
      summary: Get All Couriers
      tags:
        - Shipment
        - Enterprise Only
      parameters:
        - name: country
          in: query
          required: false
          schema:
            type: string
            minLength: 2
            maxLength: 2
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
  /logs:
    get:
      summary: Get Logs
      tags:
        - Shipment
        - Enterprise Only
      parameters:
        - name: topic
          in: query
          required: true
          schema:
            type: string
        - name: topicId
          in: query
          required: false
          description: Required if no storeId
          schema:
            type: string
        - name: storeId
          in: query
          required: false
          description: Required if no topicId
          schema:
            type: string
        - name: logLevel
          in: query
          required: false
          schema:
            type: string
            enum:
              - info
              - debug
              - warn
              - error
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: limit
          in: query
          required: false
          schema:
            type: number
            minimum: 1
            maximum: 500
            default: 10
        - name: page
          in: query
          required: false
          schema:
            type: number
            default: 1
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
        '404':
          description: Status 404
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: string
      security:
        - basicAuth: []
    post:
      summary: Add Log
      tags:
        - Shipment
        - Enterprise Only
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  message:
                    type: string
                  id:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
        '500':
          description: Status 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - failed
                  message:
                    type: string
                  code:
                    type: string
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Log'
        required: true
  /invoices:
    get:
      summary: List Invoices
      tags: 
        - Invoices
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: number
        - name: limit
          in: query
          required: false
          schema:
            type: number
        - name: reference_number
          in: query
          required: false
          schema:
            type: string
        - name: invoice_number
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoices:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
      security:
        - bearerAuth: []
  '/payments/{storeId}':
    post:
      summary: Add Payment
      description: This service available for some Enterprise subscriptions Only
      tags: 
        - Payments
        - Enterprise Only
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorBasic'
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - payment_mode
              properties:
                payment_mode:
                  type: string
                amount:
                  type: number
                invoices:
                  type: array
                  items:
                    required:
                      - amount_applied
                      - invoice_id
                    type: object
                    properties:
                      amount_applied:
                        type: number
                      invoice_id:
                        type: string
                account_id:
                  type: string
                bank_charges:
                  type: string
                  description: Requires account_id when used
        required: true
    parameters:
      - name: storeId
        in: path
        required: true
        schema:
          type: string
  /payments:
    get:
      summary: List Payments
      tags: 
        - Payments
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: number
        - name: limit
          in: query
          required: false
          schema:
            type: number
        - name: reference_number
          in: query
          required: false
          schema:
            type: string
        - name: payment_mode
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorToken'
      security:
        - bearerAuth: []
servers:
  - url: 'https://mp.knawat.io/api'
components:
  responses:
    UnauthorizedErrorToken:
      description: Access token is missing or invalid, request new one
    UnauthorizedErrorBasic:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  requestBodies:
    Store:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Store'
      required: true
    ShipmentPolicy:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ShipmentPolicy'
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      description: >
        Knawat provide <a href="#tag/Enterprise-Only">extra endpoints</a> for enterprise subscriptions, check <a href="https://knawat.com/plans">pricing here</a>.
      type: http
      scheme: basic
  schemas:
    Error:
      type: object
      required:
        - message
      properties:
        status:
          type: string
        message:
          type: string
      description: This general error structure is used throughout this API.
      example: 
        {
            "message": "SKU(s) out of stock."
        }
    Product:
      type: object
      required:
        - attributes
        - description
        - images
        - last_stock_check
        - name
        - sku
        - supplier
        - variations
      properties:
        sku:
          type: string
          description: Product ID
        supplier:
          type: number
          description: Supplier ref
        name:
          required:
            - tr
          type: object
          properties:
            tr:
              type: string
            ar:
              type: string
            en:
              type: string
        description:
          required:
            - tr
          type: object
          properties:
            tr:
              type: string
            en:
              type: string
            ar:
              type: string
        last_stock_check:
          type: string
          format: date-time
          example: '2016-02-28T16:41:41.090Z'
        images:
          type: array
          description: List of images links from Knawat CDN servers
          items:
            type: string
        categories:
          type: array
          description: Array of categories
          items:
            $ref: '#/components/schemas/Category'
        attributes:
          type: array
          description: 'Any other information about this product, materials, gender â¦ etc'
          items:
            $ref: '#/components/schemas/Attribute'
        variations:
          type: array
          description: Product variations
          items:
            $ref: '#/components/schemas/ProductVariation'
      description: An object that represents a Product.
      example: 
        {
          "sku": "4646030019238",
          "name": {
            "tr": "DAR KALIP PEMBE GÃMLEK",
            "ar": "ÙÙÙØµ ÙØ±Ø¯Ù ÙØµÙØ±",
            "en": "Slimline Pink Shirt"
          },
          "description": {
            "tr":
              "%100 Pamuk<br>*Cep Detay <br>*Uzun Katlanabilir Kol&nbsp;<br>*Ãnden DÃ¼Ämeli<br>*YanlarÄ± DÃ¼Ämeli <br>*Dar KalÄ±p <br>*Boy UzunluÄu:63 cm<br>Numune Bedeni:&nbsp;36/S/1<br>Modelin ÃlÃ§Ã¼leri:&nbsp;Boy:1,76, GÃ¶ÄÃ¼s:86, Bel:60, KalÃ§a: 91",
            "en":
              "<ul><li>100% Cotton</li><li>*Pocket Detailed</li><li>*Long Layered Sleeves</li><li>*Front Buttons</li><li>*Buttons on Sides</li><li>*Narrow Cut</li><li>*Length:63 cm</li><li>Sample Size: 36/S/1</li><li>Model's Measurements: Height:1,76, Chest:86, Waist:60, Hip: 91</li></ul>",
            "ar":
              "<ul><li>%100 ÙØ·Ù</li><li>ÙØ²ÙÙ Ø¨Ø¬ÙØ¨</li><li>Ø¨ÙÙ Ø·ÙÙÙ ÙØ§Ø¨Ù ÙÙØ§Ø²Ø§ÙØ©</li><li>Ø¨Ø£Ø²Ø±Ø§Ø± ÙÙ Ø§ÙØ§ÙØ§Ù</li><li>Ø¨Ø£Ø²Ø±Ø§Ø± ÙÙ Ø§ÙØ¬ÙØ§ÙØ¨</li><li>Ø³ÙÙÙ ÙØª</li><li>Ø§ÙØ·ÙÙ:63 Ø³Ù</li><li>ÙÙØ§Ø³ Ø§ÙØ¬Ø³Ù: 36/S/1</li><li>ÙÙØ§Ø³Ø§Øª Ø§ÙØ¹Ø§Ø±Ø¶: Ø§ÙØ·ÙÙ:1,76, Ø§ÙØµØ¯Ø±:86, Ø§ÙÙØ³Ø·:60, Ø§ÙØ®ØµØ±: 91</li></ul>"
          },
          "last_stock_check": "2018-03-15T06:53:06.949Z",
          "supplier": 1615,
          "categories": [
            {
              "id": 4856,
              "name": {
                "tr": "Outdoors / KadÄ±n",
                "en": "Outdoors / Women",
                "ar": "Ø£ÙØª Ø¯ÙØ± / ÙØ³Ø§Ø¦Ù"
              }
            }
          ],
          "images": [
            "https://cdnp4.knawat.com/buyuk/788f8a17-d5d8-4ccb-b218-9e428b199228.jpg",
            "https://cdnp4.knawat.com/buyuk/d8f20963-1772-45af-849d-da84e66d9a95.jpg",
            "https://cdnp4.knawat.com/buyuk/fa36c9d4-51c4-434f-9ffd-94fb343ce0d8.jpg"
          ],
          "attributes": [
            {
              "id": 1,
              "name": {
                "tr": "Beden",
                "en": "Size",
                "ar": "ÙÙØ§Ø³"
              },
              "options": [
                { "tr": "M", "en": "M", "ar": "M" },
                { "tr": "XXL", "en": "XXL", "ar": "XXL" }
              ]
            },
            {
              "id": 2,
              "name": {
                "tr": "Renk",
                "en": "Color",
                "ar": "ÙÙÙ"
              },
              "options": [{ "tr": "KÄ±rmÄ±zÄ±", "en": "Red", "ar": "Ø§Ø­ÙØ±" }]
            },
            {
              "id": 3,
              "name": "Material",
              "options": ["15% Cotton", "25% Polyester"]
            }
          ],
          "variations": [
            {
              "sku": "4646030019238-36",
              "price": 9.74,
              "market_price": 11.99,
              "weight": 0.5,
              "quantity": 10,
              "attributes": [
                {
                  "id": 1,
                  "name": {
                    "tr": "Beden",
                    "en": "Size",
                    "ar": "ÙÙØ§Ø³"
                  },
                  "option": { "tr": "M", "en": "M", "ar": "M" }
                }
              ]
            },
            {
              "sku": "4646030019238-38",
              "price": 9.74,
              "market_price": 11.99,
              "weight": 0.5,
              "quantity": 10,
              "barcode": null,
              "attributes": [
                {
                  "id": 1,
                  "name": {
                    "tr": "Beden",
                    "en": "Size",
                    "ar": "ÙÙØ§Ø³"
                  },
                  "option": { "tr": "XXL", "en": "XXL", "ar": "XXL" }
                }
              ]
            }
          ]
        }
    ProductVariation:
      type: object
      required:
        - cost_price
        - quantity
        - sale_price
        - sku
        - weight
      properties:
        sku:
          type: string
          description: Variation id
        cost_price:
          type: number
          description: 'Your cost, Knawat sale product with this price'
        sale_price:
          type: number
          description: This is the listed price on your store
        market_price:
          type: number
          description: Price before the discount
        weight:
          type: number
          description: Product weight
        quantity:
          type: number
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
      example: |
        {
          "sku": "4646030019238-36",
          "cost_price": 5.22,
          "sale_price": 9.74,
          "market_price": 11.99,
          "weight": 0.5,
          "quantity": 10,
          "attributes": [
            {
              "id": 1,
              "name": {
                "tr": "Beden",
                "en": "Size",
                "ar": "ÙÙØ§Ø³"
              },
              "option": { "tr": "M", "en": "M", "ar": "M" }
            }
          ]
        }
    Attribute:
      type: object
      required:
        - id
        - name
        - option
      properties:
        id:
          type: number
        name:
          required:
            - tr
          type: object
          properties:
            tr:
              type: string
            en:
              type: string
            ar:
              type: string
        option:
          required:
            - tr
          type: object
          properties:
            tr:
              type: string
            en:
              type: string
            ar:
              type: string
      example: |
        {
          "id": 1,
          "name": {
            "tr": "Beden",
            "en": "Size",
            "ar": "ÙÙØ§Ø³"
          },
          "option": { "tr": "M", "en": "M", "ar": "M" }
        }
    Category:
      type: array
      items:
        required:
          - id
          - name
        type: object
        properties:
          id:
            type: number
          name:
            required:
              - productsCount
              - treeNodeLevel
            type: object
            properties:
              tr:
                type: string
              en:
                type: string
              ar:
                type: string
              treeNodeLevel:
                type: number
              productsCount:
                type: number
              parentId:
                type: number
      example: 
        [{
          "id": 4857,
          "name": {
            "tr": "AyakkabÄ±",
            "en": "Shoes",
            "ar": "Ø­Ø°Ø§Ø¡"
          },
          "parentId": 32423,
          "productsCount": 352,
          "treeNodeLevel": 1
        },
        {
          "id": 4859,
          "name": {
            "tr": "AyakkabÄ± / KadÄ±n",
            "en": "Shoes / Women",
            "ar": "Ø­Ø°Ø§Ø¡ / ÙØ³Ø§Ø¦Ù"
          },
          "parentId": 2435,
          "productsCount": 456,
          "treeNodeLevel": 2
        }]
    Order:
      type: object
      required:
        - items
        - orderNumber
        - shipping
        - status
      properties:
        id:
          type: string
          description: Order External ID
        status:
          type: string
          enum:
            - pending
            - processing
            - cancelled
        items:
          type: array
          items:
            required:
              - quantity
              - sku
            type: object
            properties:
              quantity:
                type: number
                minimum: 1
                maximum: 10
              sku:
                type: string
          minItems: 1
        shipping:
          required:
            - address_1
            - city
            - country
            - first_name
            - last_name
            - state
          type: object
          properties:
            first_name:
              type: string
            last_name:
              type: string
            company:
              type: string
            address_1:
              type: string
            address_2:
              type: string
            city:
              type: string
            state:
              type: string
            postcode:
              type: string
            country:
              type: string
              description: ISO 3166-1 alpha-2 codes are two-letter country codes
              minLength: 2
              maxLength: 2
              example: TR
            email:
              type: string
            phone:
              type: string
        invoice_url:
          type: string
          description: Optional invoice to print with the order
        notes:
          type: string
        shipping_method:
          type: string
        orderNumber:
          type: string
        trackingNumber:
          type: string
      example: 
        {
            "id": "12763",
            "status": "pending",
            "items": [
                {
                    "quantity": 1,
                    "sku": "H3576AZ17HSNM13-XS"
                }
            ],
            "shipping": {
                "first_name": "Jhon",
                "last_name": "Doe",
                "company": "Knawat",
                "address_1": "Halaskargazi Mahallesi, D10 KAT5 Cd, Rumeli Cd. 35-37",
                "address_2": "",
                "city": "ÅiÅli",
                "state": "Ä°stanbul",
                "postcode": "34371",
                "country": "TR",
                "email": "info@knawat.com",
                "phone": "(0212) 296 11 94"
            },
            "invoice_url": "http://knawat.com/invoices/pdf/example.pdf",
            "notes": "My Orders"
        }
    OrderResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - fail
        order:
          $ref: '#/components/schemas/Order'
        warning:
          type: array
          items:
            required:
              - message
            type: object
            properties:
              message:
                type: string
              code:
                type: number
                example: 1102 => This items are out of stock
              skus:
                type: array
                items:
                  type: string
        errors:
          type: array
          items:
            required:
              - message
              - status
            type: object
            properties:
              status:
                type: string
                enum:
                  - fail
              message:
                type: string
              solution:
                type: string
              code:
                type: number
                example: >-
                  1101 => The products you ordered is not in-stock, The order
                  has not been created!
      example: 
        {
            "status": "success",
            "order": {
                "id": "3435344",
                ...
            }
        }
    Store:
      type: object
      required:
        - name
        - status
        - type
        - url
        - users
      properties:
        url:
          type: string
          description: URL is the store ID
          example: 'https://www.example.com'
        name:
          type: string
          minLength: 3
        status:
          type: string
          enum:
            - confirmed
            - unconfirmed
            - archived
            - error
        type:
          type: string
          description: Lowercase only allowed
          enum:
            - woocommerce
            - magento1
            - magento2
            - salla
            - expandcart
            - opencart
            - shopify
            - csv
            - ebay
            - api
            - other
        created:
          type: string
          format: date
        updated:
          type: string
          format: date
        stock_date:
          type: string
          format: date
        stock_status:
          type: string
          default: idle
          enum:
            - idle
            - in-progress
        price_date:
          type: string
          format: date
        price_status:
          type: string
          default: idle
          enum:
            - idle
            - in-progress
        sale_price:
          type: number
          default: 1.7
          example: 1 = Same as Knawat price
        compared_at_price:
          type: number
          default: 2
          example: 2 = Same as sale price
        currency:
          type: string
          description: 3 digit numeric ISO 4217 codes
          minLength: 3
          maxLength: 3
          pattern: '^[A-Z]{3}$'
        consumer_key:
          type: string
          default: Auto generated
        consumer_secret:
          type: string
          default: Auto generated
        external_data:
          type: object
          description: 'Free object to save external IDs, token ... etc'
        internal_data:
          type: object
          description: Free object to save OMS references
        users:
          type: array
          description: At least one owner should be there in the array
          items:
            required:
              - email
              - roles
            type: object
            properties:
              email:
                type: string
              roles:
                type: array
                items:
                  type: string
                  enum:
                    - owner
                    - accounting
                    - products
                    - orders
                minItems: 1
                maxItems: 4
        languages:
          type: array
          items:
            type: string
            pattern: '^[a-z]{2}-[A-Z]{2}$]'
          minItems: 1
          maxItems: 10
        address:
          required:
            - address_1
            - country
            - email
            - first_name
            - last_name
          type: object
          properties:
            first_name:
              type: string
              minLength: 3
              pattern: '^[A-Za-z ]{3,}$'
            last_name:
              type: string
              minLength: 3
              pattern: '^[A-Za-z ]{3,}$'
            company:
              type: string
            address_1:
              type: string
              minLength: 3
              pattern: '^[A-Za-z0-9 -.,]{3,}$'
            address_2:
              type: string
              minLength: 3
              pattern: '^[A-Za-z0-9 -.,]{3,}$'
            city:
              type: string
              description: 'City or Status, one of them is required'
            state:
              type: string
              description: 'City or Status, one of them is required'
            postcode:
              type: string
            country:
              type: string
              description: 'ISO 3166-1 alpha-2, capital letters only'
              minLength: 2
              maxLength: 2
              pattern: '^[A-Z]{2}$'
            email:
              type: string
            phone:
              type: string
        debit:
          type: number
          description: 'Just with /stores/me & /stores/{url}'
        credit:
          type: number
          description: 'Just with /stores/me & /stores/{url}'
    Currency:
      type: object
      properties:
        currencyCode:
          type: string
        rate:
          type: number
    ShipmentPolicy:
      type: object
      required:
        - countries
        - name
        - odoo_id
        - rules
      properties:
        name:
          type: string
        countries:
          type: array
          items:
            type: string
            minLength: 2
            maxLength: 2
        odoo_id:
          type: number
        rules:
          type: array
          items:
            required:
              - cost
              - courier
              - delivery_days_max
              - delivery_days_min
              - type
              - units_max
              - units_min
            type: object
            properties:
              courier:
                type: string
              delivery_days_min:
                type: number
              delivery_days_max:
                type: number
              units_min:
                type: number
              units_max:
                type: number
              type:
                type: string
                enum:
                  - weight
                  - price
              cost:
                type: number
    Log:
      type: object
      required:
        - code
        - topic
      properties:
        topic:
          type: string
        code:
          type: number
          example: >-
            100 =>  Informational status response code indicates that everything
            so far is OK and that the client should continue with the request or
            ignore it if it is already finished.
        topicId:
          type: string
        storeId:
          type: string
        timestamp:
          type: string
          format: date
        message:
          type: string
        logLevel:
          type: string
          enum:
            - info
            - debug
            - warn
            - error
        payload:
          type: object
    Invoice:
      type: object
      properties:
        invoice_id:
          type: string
        customer_name:
          type: string
        customer_id:
          type: string
        status:
          type: string
        invoice_number:
          type: string
        reference_number:
          type: string
        date:
          type: string
          format: date
        due_date:
          type: string
          format: date
        due_days:
          type: string
        total:
          type: number
        balance:
          type: number
        created_time:
          type: string
          format: date
        last_modified_time:
          type: string
          format: date
        shipping_charge:
          type: number
        adjustment:
          type: number
    Payment:
      type: object
      required:
        - amount
        - customer_id
        - date
        - payment_id
        - payment_mode
        - unused_amount
      properties:
        payment_id:
          type: string
        customer_id:
          type: string
        payment_mode:
          type: string
        amount:
          type: number
        unused_amount:
          type: number
        invoices:
          type: array
          items:
            required:
              - amount_applied
              - invoice_id
            type: object
            properties:
              amount_applied:
                type: number
              invoice_id:
                type: string
        bank_charges:
          type: number
        date:
          type: string
          format: date
        account_id:
          type: string
        account_name:
          type: string
